<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.maplerabbit.rlg.module.user.mapper.UserMapper">
    <update id="updateLogin">
        update user set
            last_login_time = #{time},
            last_login_ip = #{ip}
        <where>
            uuid = #{uuid}
        </where>
    </update>

    <sql id="count">
        select count(*) from user
    </sql>

    <sql id="selectLoginInfo">
        select
            user.uuid,
            user.username,
            user.password,
            user.avatar_url,
            user.phone,
            user.email,
            user.enable,
            permission.flag
        from user
                 left join user_role on user.uuid = user_role.user_uuid
                 left join role_permission on user_role.role_id = role_permission.role_id
                 left join permission on permission.id = role_permission.permission_id
    </sql>

    <resultMap id="LoginInfoResultMap" type="cn.maplerabbit.rlg.pojo.user.vo.UserLoginVO">
        <id column="uuid" property="uuid" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="avatar_url" property="avatarUrl" />
        <result column="phone" property="phone" />
        <result column="email" property="email" />
        <result column="enable" property="enable" />
        <collection property="permissions" ofType="java.lang.String">
            <constructor>
                <arg column="flag" />
            </constructor>
        </collection>
    </resultMap>

    <!-- UserLoginVO getLoginInfoByUserName(String username); -->
    <select id="getLoginInfoByUserName" resultMap="LoginInfoResultMap">
        <include refid="selectLoginInfo" />
        <where>
            user.username = #{username}
        </where>
    </select>

    <!-- UserLoginVO getLoginInfoByEmail(String email); -->
    <select id="getLoginInfoByEmail" resultMap="LoginInfoResultMap">
        <include refid="selectLoginInfo" />
        <where>
            user.email = #{email}
        </where>
    </select>

    <!-- UserLoginVO getLoginInfoByPhone(String phone); -->
    <select id="getLoginInfoByPhone" resultMap="LoginInfoResultMap">
        <include refid="selectLoginInfo" />
        <where>
            user.phone = #{phone}
        </where>
    </select>

    <!-- int countByUsername(String username); -->
    <select id="countByUsername" resultType="int">
        <include refid="count" />
        <where>
            username = #{username}
        </where>
    </select>

    <!-- int countByEmail(String email); -->
    <select id="countByEmail" resultType="int">
        <include refid="count" />
        <where>
            email = #{email}
        </where>
    </select>

    <!-- int countByPhone(String phone); -->
    <select id="countByPhone" resultType="int">
        <include refid="count" />
        <where>
            phone = #{phone}
        </where>
    </select>

    <!-- ========== Base CRUD ========== -->
    <sql id="BaseColumns">
        uuid, username, password, avatar_url, real_name, gender, phone, email, birth, description, enable, last_login_time, last_login_ip, sign_up_time
    </sql>
    <sql id="BaseQueryColumns">
        uuid, username, password, avatar_url, real_name, gender, phone, email, birth, description, enable, last_login_time, last_login_ip, sign_up_time, create_time, modified_time
    </sql>
    <sql id="save">
        #{uuid}, #{username}, #{password}, #{avatarUrl}, #{realName}, #{gender}, #{phone}, #{email}, #{birth}, #{description}, #{enable}, #{lastLoginTime}, #{lastLoginIp}, #{signUpTime}
    </sql>
    <sql id="saveBatch">
        #{i.uuid}, #{i.username}, #{i.password}, #{i.avatarUrl}, #{i.realName}, #{i.gender}, #{i.phone}, #{i.email}, #{i.birth}, #{i.description}, #{i.enable}, #{i.lastLoginTime}, #{i.lastLoginIp}, #{i.signUpTime}
    </sql>

    <resultMap id="BaseResultMap" type="cn.maplerabbit.rlg.pojo.user.entity.User">
        <id column="uuid" property="uuid" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="avatar_url" property="avatarUrl" />
        <result column="real_name" property="realName" />
        <result column="gender" property="gender" />
        <result column="phone" property="phone" />
        <result column="email" property="email" />
        <result column="birth" property="birth" />
        <result column="description" property="description" />
        <result column="enable" property="enable" />
        <result column="last_login_time" property="lastLoginTime" />
        <result column="last_login_ip" property="lastLoginIp" />
        <result column="sign_up_time" property="signUpTime" />
        <result column="create_time" property="createTime" />
        <result column="modified_time" property="modifiedTime" />
    </resultMap>

    <insert id="save" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into user(
            <include refid="BaseColumns" />
        ) values (
            <include refid="save" />
        )
    </insert>

    <insert id="saveBatch" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into user(
            <include refid="BaseColumns" />
        ) values
        <foreach collection="list" item="i" separator=", ">
            (<include refid="saveBatch" />)
        </foreach>
    </insert>

    <delete id="remove">
        delete from user where uuid = #{pk}
    </delete>

    <delete id="removeBatch">
        delete from user where user.uuid in
        <foreach collection="list" item="pk" open="(" close=")" separator=", ">#{pk}</foreach>
    </delete>

    <update id="update">
        update user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="avatarUrl != null">avatar_url = #{avatarUrl},</if>
            <if test="realName != null">real_name = #{realName},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="email != null">email = #{email},</if>
            <if test="birth != null">birth = #{birth},</if>
            <if test="description != null">description = #{description},</if>
            <if test="enable != null">enable = #{enable},</if>
            <if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
            <if test="lastLoginIp != null">last_login_ip = #{lastLoginIp},</if>
            <if test="signUpTime != null">sign_up_time = #{signUpTime},</if>
        </set>
        <where>
            uuid = #{uuid}
        </where>
    </update>

    <select id="query" resultMap="BaseResultMap">
        select
            <include refid="BaseQueryColumns" />
        from user
        <where>
            uuid = #{pk}
        </where>
    </select>

    <select id="queryBatch" resultMap="BaseResultMap">
        select
            <include refid="BaseQueryColumns" />
        from user
        <where>
            uuid in
            <foreach collection="list" item="pk" open="(" close=")" separator=", ">#{pk}</foreach>
        </where>
    </select>

    <select id="count" resultType="int">
        select count(*) from user
    </select>
</mapper>